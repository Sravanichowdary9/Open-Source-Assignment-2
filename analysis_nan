#!/bin/bash

# Check if an input file is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <input_file>"
  exit 1
fi

input_file="$1"

# Function to calculate Pearson correlation coefficient
calculate_correlation() {
  local x_values=("$@") # Input is an array
  local y_values=()
  local n=${#x_values[@]}

  # Extract y_values (average ratings).
  local i=0
  while IFS=$'\t' read -r _ _ _ rating _; do
    if ((i > 0)); then
      # Check if rating is a valid number; if not, skip it.
      if [[ "$rating" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
        y_values+=("$rating")
      fi
    fi
    ((i++))
  done < "$1"

  local n_y=${#y_values[@]}
  # Check if the number of x and y values match
  if [ $n -ne $n_y ]; then
    echo "Error: Number of x and y values do not match.  x=$n, y=$n_y" >&2
    return 1 # Return non-zero to indicate failure
  fi

  # Calculate means
  local sum_x=0
  local sum_y=0
  for ((i=0; i<n; i++)); do
    sum_x=$(echo "$sum_x + ${x_values[i]}" | bc)
    sum_y=$(echo "$sum_y + ${y_values[i]}" | bc)
  done
  local mean_x=$(echo "scale=10; $sum_x / $n" | bc)
  local mean_y=$(echo "scale=10; $sum_y / $n" | bc)

  # Calculate standard deviations and correlation
  local sum_xy=0
  local sum_x2=0
  local sum_y2=0
  for ((i=0; i<n; i++)); do
    local dev_x=$(echo "scale=10; ${x_values[i]} - $mean_x" | bc)
    local dev_y=$(echo "scale=10; ${y_values[i]} - $mean_y" | bc)
    sum_xy=$(echo "scale=10; $sum_xy + ($dev_x * $dev_y)" | bc)
    sum_x2=$(echo "scale=10; $sum_x2 + ($dev_x * $dev_x)" | bc)
    sum_y2=$(echo "scale=10; $sum_y2 + ($dev_y * $dev_y)" | bc)
  done
  local std_x=$(echo "scale=10; sqrt($sum_x2 / $n)" | bc)
  local std_y=$(echo "scale=10; sqrt($sum_y2 / $n)" | bc)

  if [ "$(echo "$std_x == 0" | bc -l)" -eq 1 ] || [ "$(echo "$std_y == 0" | bc -l)" -eq 1 ]; then
    echo "0.000" # Correlation is 0 if either standard deviation is 0
    return 0
  fi
  local correlation=$(echo "scale=3; $sum_xy / ($std_x * $std_y)" | bc)
  echo "$correlation"
  return 0
}

# Function to count occurrences of mechanics or domains
count_occurrences() {
  local column_number="$1"
  local column_name="$2" # added this
  awk -v col_name="$column_name" -v col_num="$column_number" ' #added these
    BEGIN {
      OFS="\t"
    }
    NR>1 {
      if (col_num != "") {
        split($col_num, parts, ";")
        for (part in parts) {
          count[parts[part]]++
        }
      }
    }
    END {
      max_count = 0
      max_item = ""
      for (item in count) {
        if (count[item] > max_count) {
          max_count = count[item]
          max_item = item
        }
      }
      printf "The most popular %s is %s found in %d games\n", col_name, max_item, max_count
    }
    ' "$input_file"
}

# Find most popular mechanics
count_occurrences 13 "game mechanics"
# Find most popular domains
count_occurrences 14 "game domain"

# Get years and ratings for correlation calculation
declare -a years
while IFS=$'\t' read -r _ year _ rating _ _ _ _ _ _ _ _; do
    if [[ "$year" =~ ^[0-9]+$ ]]; then #check if year is a number
        years+=("$year")
    fi
done < "$input_file"

# Calculate correlation between year and rating
correlation_year_rating=$(calculate_correlation "${years[@]}")
echo "The correlation between the year of publication and the average rating is $correlation_year_rating"

# Get complexity and ratings for correlation calculation
declare -a complexities
i=0
while IFS=$'\t' read -r _ _ _ _ complexity _ _ _ _ _ _ _; do
  if ((i > 0)); then
    complexities+=("$complexity")
  fi
  ((i++))
done < "$input_file"

# Calculate correlation between complexity and rating
correlation_complexity_rating=$(calculate_correlation "${complexities[@]}")
echo "The correlation between the complexity of a game and its average rating is $correlation_complexity_rating"

